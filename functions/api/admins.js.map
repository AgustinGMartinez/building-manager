{"version":3,"sources":["../../backend/api/admins.js"],"names":["Joi","require","express","router","Router","query","CustomError","AuthUtils","authenticated","validateAdmin","admin","schema","username","string","min","required","password","name","lastname","isSuperadmin","boolean","validate","error","get","superadmin","req","res","queryString","result","send","rows","post","next","body","length","hashPassword","saltedPassword","delete","id","params","deleteQuery","module","exports"],"mappings":"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","sourcesContent":["const Joi = require('joi')\nconst express = require('express'),\n  router = express.Router()\nconst query = require('../db')\nconst CustomError = require('../errors')\nconst AuthUtils = require('../utils/authentication')\nconst authenticated = require('../middlewares/authenticated')\n\nfunction validateAdmin(admin) {\n  const schema = {\n    username: Joi.string()\n      .min(3)\n      .required(),\n    password: Joi.string()\n      .min(6)\n      .required(),\n    name: Joi.string().required(),\n    lastname: Joi.string().required(),\n    isSuperadmin: Joi.boolean().required(),\n  }\n  const { error } = Joi.validate(admin, schema)\n  if (error) {\n    throw new CustomError(400, error)\n  }\n}\n\nrouter.get('/', authenticated.superadmin, async (req, res) => {\n  const queryString = `\n    SELECT *, CONCAT (name, ' ', lastname) as fullname\n    from users\n    where is_admin = 1 OR is_superadmin = 1\n  `\n  const result = await query(queryString)\n  res.send(result.rows)\n})\n\nrouter.post('/', authenticated.superadmin, async (req, res, next) => {\n  try {\n    validateAdmin(req.body)\n    const { username, password, name, lastname, isSuperadmin } = req.body\n    const queryString = `\n      SELECT * from users where username = '${username}'\n    `\n    const result = await query(queryString)\n    if (result.rows.length) {\n      return next(new CustomError(400, 'Ya existe un usuario con ese nombre'))\n    }\n    const saltedPassword = await AuthUtils.hashPassword(password)\n    await query(\n      `\n      INSERT INTO users (username, password, name, lastname, is_admin, is_superadmin) VALUES ($1, $2, $3, $4, $5, $6)\n      `,\n      [username, saltedPassword, name, lastname, 1, isSuperadmin ? 1 : 0],\n    )\n    res.send()\n  } catch (err) {\n    next(err)\n  }\n})\n\nrouter.delete('/:id', authenticated.superadmin, async (req, res, next) => {\n  try {\n    const { id } = req.params\n    const deleteQuery = `\n      DELETE FROM users WHERE id = $1\n    `\n    await query(deleteQuery, [id])\n    res.send()\n  } catch (err) {\n    next(err)\n  }\n})\n\nmodule.exports = router\n"],"file":"admins.js"}