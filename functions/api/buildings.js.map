{"version":3,"sources":["../../backend/api/buildings.js"],"names":["Joi","require","express","router","Router","query","CustomError","authenticated","validateBuilding","building","schema","territory","number","required","street","string","house_number","admin_note","optional","allow","lat","lng","validate","error","get","admin","req","res","buildingsQuery","doorbellsQuery","buildings","doorbells","rows","forEach","bId","id","bDoorbells","doorbell","building_id","push","send","next","buildingId","params","post","body","queryString","result","length","delete","module","exports"],"mappings":"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","sourcesContent":["const Joi = require('joi')\nconst express = require('express'),\n  router = express.Router()\nconst query = require('../db')\nconst CustomError = require('../errors')\nconst authenticated = require('../middlewares/authenticated')\n\nfunction validateBuilding(building) {\n  const schema = {\n    territory: Joi.number().required(),\n    street: Joi.string().required(),\n    house_number: Joi.string().required(),\n    admin_note: Joi.string()\n      .optional()\n      .allow(''),\n    lat: Joi.number().required(),\n    lng: Joi.number().required(),\n  }\n  const { error } = Joi.validate(building, schema)\n  if (error) {\n    throw new CustomError(400, error)\n  }\n}\n\nrouter.get('/', authenticated.admin, async (req, res) => {\n  try {\n    const buildingsQuery = `\n    SELECT b.*, coalesce(d.doorbell_count, 0) AS doorbell_count\n    FROM buildings b\n    LEFT JOIN (\n      SELECT building_id, count(*) as doorbell_count\n        FROM doorbells\n        WHERE deleted = 0\n        GROUP BY building_id\n    ) as d\n    ON b.id = d.building_id\n    `\n    const doorbellsQuery = `\n      SELECT *\n      FROM doorbells\n      WHERE deleted = 0\n    `\n    const buildings = await query(buildingsQuery)\n    const doorbells = await query(doorbellsQuery)\n    buildings.rows.forEach(building => {\n      const bId = building.id\n      const bDoorbells = []\n      doorbells.rows.forEach(doorbell => {\n        if (doorbell.building_id === bId) {\n          bDoorbells.push(doorbell)\n        }\n      })\n      building.doorbells = bDoorbells\n    })\n    res.send(buildings.rows)\n  } catch (err) {\n    next(err)\n  }\n})\n\nrouter.get('/:id/doorbells', authenticated.admin, async (req, res, next) => {\n  try {\n    const buildingId = req.params.id\n    const doorbellsQuery = `\n    SELECT *\n    FROM doorbells\n    WHERE deleted = 0 AND building_id = $1\n    ORDER BY floor, identifier\n  `\n    const doorbells = await query(doorbellsQuery, [buildingId])\n    res.send(doorbells.rows)\n  } catch (err) {\n    next(err)\n  }\n})\n\nrouter.post('/', authenticated.admin, async (req, res, next) => {\n  try {\n    validateBuilding(req.body)\n    const { territory, street, house_number, admin_note, lat, lng } = req.body\n    const queryString = `\n      SELECT * FROM buildings WHERE street = $1 AND house_number = $2\n    `\n    const result = await query(queryString, [street, house_number])\n    if (result.rows.length) {\n      return next(new CustomError(400, 'Ya existe un edificio en esa direcciÃ³n'))\n    }\n    await query(\n      `\n      INSERT INTO buildings (territory, street, house_number, admin_note, lat, lng) VALUES ($1, $2, $3, $4, $5, $6)\n      `,\n      [territory, street, house_number, admin_note, lat, lng],\n    )\n    res.send()\n  } catch (err) {\n    next(err)\n  }\n})\n\nrouter.delete('/:id', authenticated.admin, async (req, res, next) => {\n  try {\n    const { id } = req.params\n    await query(\n      `\n      DELETE FROM buildings WHERE id = $1\n      `,\n      [id],\n    )\n    await query(\n      ` \n      UPDATE doorbells SET deleted = 1 WHERE building_id = $1\n      `,\n      [id],\n    )\n    res.send()\n  } catch (err) {\n    next(err)\n  }\n})\n\nmodule.exports = router\n"],"file":"buildings.js"}