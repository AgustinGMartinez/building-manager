{"version":3,"sources":["../../backend/api/doorbells.js"],"names":["Joi","require","express","router","Router","query","CustomError","authenticated","createQueryValues","validateUpsert","doorbells","schema","buildingId","number","required","array","items","object","floor","identifier","string","validate","error","post","admin","req","res","next","body","setAllDeletedQuery","upsertQueryData","reduce","acc","concat","partialUpsertQuery","upsertQuery","send","module","exports"],"mappings":";;;;;;;;AAAA,IAAMA,GAAG,GAAGC,OAAO,CAAC,KAAD,CAAnB;;AACA,IAAMC,OAAO,GAAGD,OAAO,CAAC,SAAD,CAAvB;AAAA,IACEE,MAAM,GAAGD,OAAO,CAACE,MAAR,EADX;;AAEA,IAAMC,KAAK,GAAGJ,OAAO,CAAC,OAAD,CAArB;;AACA,IAAMK,WAAW,GAAGL,OAAO,CAAC,WAAD,CAA3B;;AACA,IAAMM,aAAa,GAAGN,OAAO,CAAC,8BAAD,CAA7B;;AACA,IAAMO,iBAAiB,GAAGP,OAAO,CAAC,aAAD,CAAP,CAAuBO,iBAAjD;;AAEA,SAASC,cAAT,CAAwBC,SAAxB,EAAmC;AACjC,MAAMC,MAAM,GAAG;AACbC,IAAAA,UAAU,EAAEZ,GAAG,CAACa,MAAJ,GAAaC,QAAb,EADC;AAEbJ,IAAAA,SAAS,EAAEV,GAAG,CAACe,KAAJ,GACRC,KADQ,CAEPhB,GAAG,CAACiB,MAAJ,CAAW;AACTC,MAAAA,KAAK,EAAElB,GAAG,CAACa,MAAJ,EADE;AAETM,MAAAA,UAAU,EAAEnB,GAAG,CAACoB,MAAJ;AAFH,KAAX,CAFO,EAORN,QAPQ;AAFE,GAAf;;AADiC,sBAYfd,GAAG,CAACqB,QAAJ,CAAaX,SAAb,EAAwBC,MAAxB,CAZe;AAAA,MAYzBW,KAZyB,iBAYzBA,KAZyB;;AAajC,MAAIA,KAAJ,EAAW;AACT,UAAM,IAAIhB,WAAJ,CAAgB,GAAhB,EAAqBgB,KAArB,CAAN;AACD;AACF;;AAEDnB,MAAM,CAACoB,IAAP,CAAY,GAAZ,EAAiBhB,aAAa,CAACiB,KAA/B;AAAA,qFAAsC,iBAAOC,GAAP,EAAYC,GAAZ,EAAiBC,IAAjB;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAElClB,YAAAA,cAAc,CAACgB,GAAG,CAACG,IAAL,CAAd;AAFkC,wBAGAH,GAAG,CAACG,IAHJ,EAG1BhB,UAH0B,aAG1BA,UAH0B,EAGdF,SAHc,aAGdA,SAHc;AAI5BmB,YAAAA,kBAJ4B;AAAA;AAAA,mBAO5BxB,KAAK,CAACwB,kBAAD,EAAqB,CAACjB,UAAD,CAArB,CAPuB;;AAAA;AAQ5BkB,YAAAA,eAR4B,GAQVpB,SAAS,CAACqB,MAAV,CAAiB,UAACC,GAAD,SAAgC;AAAA,kBAAxBd,KAAwB,SAAxBA,KAAwB;AAAA,kBAAjBC,UAAiB,SAAjBA,UAAiB;AACvE,qBAAOa,GAAG,CAACC,MAAJ,CAAWrB,UAAX,EAAuBM,KAAvB,EAA8BC,UAA9B,YAA6CP,UAA7C,SAA0DM,KAA1D,SAAkEC,UAAlE,EAAP;AACD,aAFuB,EAErB,EAFqB,CARU;AAW5Be,YAAAA,kBAX4B;AAiB5BC,YAAAA,WAjB4B,GAiBd3B,iBAAiB,CAAC0B,kBAAD,EAAqBJ,eAArB,EAAsC,CAAtC,CAjBH;AAAA;AAAA,mBAkB5BzB,KAAK,CAAC8B,WAAD,EAAcL,eAAd,CAlBuB;;AAAA;AAmBlCJ,YAAAA,GAAG,CAACU,IAAJ;AAnBkC;AAAA;;AAAA;AAAA;AAAA;AAqBlCT,YAAAA,IAAI,aAAJ;;AArBkC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAAtC;;AAAA;AAAA;AAAA;AAAA;AAyBAU,MAAM,CAACC,OAAP,GAAiBnC,MAAjB","sourcesContent":["const Joi = require('joi')\nconst express = require('express'),\n  router = express.Router()\nconst query = require('../db')\nconst CustomError = require('../errors')\nconst authenticated = require('../middlewares/authenticated')\nconst createQueryValues = require('../utils/db').createQueryValues\n\nfunction validateUpsert(doorbells) {\n  const schema = {\n    buildingId: Joi.number().required(),\n    doorbells: Joi.array()\n      .items(\n        Joi.object({\n          floor: Joi.number(),\n          identifier: Joi.string(),\n        }),\n      )\n      .required(),\n  }\n  const { error } = Joi.validate(doorbells, schema)\n  if (error) {\n    throw new CustomError(400, error)\n  }\n}\n\nrouter.post('/', authenticated.admin, async (req, res, next) => {\n  try {\n    validateUpsert(req.body)\n    const { buildingId, doorbells } = req.body\n    const setAllDeletedQuery = `\n      UPDATE doorbells SET deleted = 1 where building_id = $1\n    `\n    await query(setAllDeletedQuery, [buildingId])\n    const upsertQueryData = doorbells.reduce((acc, { floor, identifier }) => {\n      return acc.concat(buildingId, floor, identifier, `${buildingId}${floor}${identifier}`)\n    }, [])\n    const partialUpsertQuery = `\n      INSERT INTO doorbells (building_id, floor, identifier, special_id)\n      VALUES ?\n      ON CONFLICT (special_id) DO UPDATE\n        SET deleted = 0\n    `\n    const upsertQuery = createQueryValues(partialUpsertQuery, upsertQueryData, 4)\n    await query(upsertQuery, upsertQueryData)\n    res.send()\n  } catch (err) {\n    next(err)\n  }\n})\n\nmodule.exports = router\n"],"file":"doorbells.js"}