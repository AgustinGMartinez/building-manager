{"version":3,"sources":["../../backend/api/auth.js"],"names":["Joi","require","express","router","Router","query","CustomError","AuthUtils","validateLogin","auth","schema","username","string","required","password","validate","error","post","req","res","next","body","getUserQuery","user","rows","comparePassword","isAuth","token","generateJwt","undefined","send","module","exports"],"mappings":";;;;;;;;;;;;;;AAAA,IAAMA,GAAG,GAAGC,OAAO,CAAC,KAAD,CAAnB;;AACA,IAAMC,OAAO,GAAGD,OAAO,CAAC,SAAD,CAAvB;AAAA,IACEE,MAAM,GAAGD,OAAO,CAACE,MAAR,EADX;;AAEA,IAAMC,KAAK,GAAGJ,OAAO,CAAC,OAAD,CAArB;;AACA,IAAMK,WAAW,GAAGL,OAAO,CAAC,WAAD,CAA3B;;AACA,IAAMM,SAAS,GAAGN,OAAO,CAAC,yBAAD,CAAzB;;AAEA,SAASO,aAAT,CAAuBC,IAAvB,EAA6B;AAC3B,MAAMC,MAAM,GAAG;AACbC,IAAAA,QAAQ,EAAEX,GAAG,CAACY,MAAJ,GAAaC,QAAb,EADG;AAEbC,IAAAA,QAAQ,EAAEd,GAAG,CAACY,MAAJ,GAAaC,QAAb;AAFG,GAAf;;AAD2B,sBAKTb,GAAG,CAACe,QAAJ,CAAaN,IAAb,EAAmBC,MAAnB,CALS;AAAA,MAKnBM,KALmB,iBAKnBA,KALmB;;AAM3B,MAAIA,KAAJ,EAAW;AACT,UAAM,IAAIV,WAAJ,CAAgB,GAAhB,EAAqBU,KAArB,CAAN;AACD;AACF;;AAEDb,MAAM,CAACc,IAAP,CAAY,QAAZ;AAAA,qFAAsB,iBAAOC,GAAP,EAAYC,GAAZ,EAAiBC,IAAjB;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAElBZ,YAAAA,aAAa,CAACU,GAAG,CAACG,IAAL,CAAb;AAFkB,wBAGaH,GAAG,CAACG,IAHjB,EAGVV,QAHU,aAGVA,QAHU,EAGAG,QAHA,aAGAA,QAHA;AAIZQ,YAAAA,YAJY;AAAA;AAAA,mBAOEjB,KAAK,CAACiB,YAAD,EAAe,CAACX,QAAD,CAAf,CAPP;;AAAA;AAOZY,YAAAA,IAPY,iBAOmCC,IAPnC,CAOwC,CAPxC;;AAAA,gBAQbD,IARa;AAAA;AAAA;AAAA;;AAAA,kBAQD,IAAIjB,WAAJ,CAAgB,GAAhB,EAAqB,iCAArB,CARC;;AAAA;AAAA;AAAA,mBASGC,SAAS,CAACkB,eAAV,CAA0BX,QAA1B,EAAoCS,IAAI,CAACT,QAAzC,CATH;;AAAA;AASZY,YAAAA,MATY;;AAAA,gBAUbA,MAVa;AAAA;AAAA;AAAA;;AAAA,kBAUC,IAAIpB,WAAJ,CAAgB,GAAhB,EAAqB,iCAArB,CAVD;;AAAA;AAWZqB,YAAAA,KAXY,GAWJpB,SAAS,CAACqB,WAAV,mBAA2BL,IAA3B,EAXI;AAYlBA,YAAAA,IAAI,CAACT,QAAL,GAAgBe,SAAhB;AACAV,YAAAA,GAAG,CAACW,IAAJ,CAAS;AAAEH,cAAAA,KAAK,EAALA,KAAF;AAASJ,cAAAA,IAAI,EAAJA;AAAT,aAAT;AAbkB;AAAA;;AAAA;AAAA;AAAA;AAelBH,YAAAA,IAAI,aAAJ;;AAfkB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAAtB;;AAAA;AAAA;AAAA;AAAA;AAmBAW,MAAM,CAACC,OAAP,GAAiB7B,MAAjB","sourcesContent":["const Joi = require('joi')\nconst express = require('express'),\n  router = express.Router()\nconst query = require('../db')\nconst CustomError = require('../errors')\nconst AuthUtils = require('../utils/authentication')\n\nfunction validateLogin(auth) {\n  const schema = {\n    username: Joi.string().required(),\n    password: Joi.string().required(),\n  }\n  const { error } = Joi.validate(auth, schema)\n  if (error) {\n    throw new CustomError(400, error)\n  }\n}\n\nrouter.post('/login', async (req, res, next) => {\n  try {\n    validateLogin(req.body)\n    const { username, password } = req.body\n    const getUserQuery = `\n      select * from users where username = $1 limit 1\n    `\n    const user = (await query(getUserQuery, [username])).rows[0]\n    if (!user) throw new CustomError(401, 'Usuario o contrase침a inv치lidos.')\n    const isAuth = await AuthUtils.comparePassword(password, user.password)\n    if (!isAuth) throw new CustomError(401, 'Usuario o contrase침a inv치lidos.')\n    const token = AuthUtils.generateJwt({ ...user })\n    user.password = undefined\n    res.send({ token, user })\n  } catch (err) {\n    next(err)\n  }\n})\n\nmodule.exports = router\n"],"file":"auth.js"}