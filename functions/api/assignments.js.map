{"version":3,"sources":["../../backend/api/assignments.js"],"names":["Joi","require","express","router","Router","query","CustomError","authenticated","createQueryValues","validateUserId","validateAssignment","assignment","schema","user_id","number","required","note","string","optional","allow","doorbells","array","items","object","id","building_id","special_id","campaign_id","expiry_date","date","validate","error","getAssignments","noQueries","assignmentsQuery","doorbellsAssignmentsQuery","buildingsQuery","Promise","all","assignments","doorbellsAssignments","buildings","rows","map","assignmentId","aBuildingsIds","aBuildings","aDoorbells","aTerritories","forEach","doorbellAssignment","assignment_id","push","completed","Set","building","find","b","territory","territories","usersWithSameBuildingsAssignedQuery","_","i","join","flat","users","length","row","fullname","name","lastname","some","u","usersSharingBuildings","get","user","req","res","next","send","params","post","admin","body","assignmentQuery","userAssignmentsQuery","doorbellsAssignmentsData","reduce","acc","doorbell","concat","partialDoorbellsAssignmentsQuery","put","specialId","buildingId","userId","isAdmin","is_admin","toggleDoorbellQuery","updateBuildingLastDoneQuery","checkIfInHistoryQuery","result","inHistory","updateHistoryQuery","pendingCompletion","d","isCompleted","includes","setAssignmentCompletedQuery","delete","module","exports"],"mappings":"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","sourcesContent":["const Joi = require('joi')\nconst express = require('express'),\n  router = express.Router()\nconst query = require('../db')\nconst CustomError = require('../errors')\nconst authenticated = require('../middlewares/authenticated')\nconst createQueryValues = require('../utils/db').createQueryValues\nconst validateUserId = require('../utils/validateUserId').validateUserId\n\nfunction validateAssignment(assignment) {\n  const schema = {\n    user_id: Joi.number().required(),\n    note: Joi.string()\n      .optional()\n      .allow(''),\n    doorbells: Joi.array()\n      .items(\n        Joi.object({\n          id: Joi.number().required(),\n          building_id: Joi.number().required(),\n          special_id: Joi.string().required(),\n        }),\n      )\n      .required(),\n    campaign_id: Joi.number()\n      .optional()\n      .allow(null),\n    expiry_date: Joi.date()\n      .optional()\n      .allow(null),\n  }\n  const { error } = Joi.validate(assignment, schema)\n  if (error) {\n    throw new CustomError(400, error)\n  }\n}\n\nconst getAssignments = async ({ id, campaign_id, user_id }) => {\n  const noQueries = !id && !campaign_id && !user_id\n  const assignmentsQuery = `\n    SELECT a.*, u.name as user_name, u.lastname as user_lastname, u.id as user_id, c.name as campaign_name\n    from assignments a\n    inner join user_assignments ua\n    on ua.assignment_id = a.id\n    inner join users u\n    on u.id = ua.user_id\n    LEFT JOIN campaigns c\n    ON a.campaign_id = c.id\n    WHERE 1 = 1\n    ${id ? 'AND a.id = $1' : ''}\n    ${campaign_id ? 'AND a.campaign_id = $1' : ''}\n    ${user_id ? 'AND ua.user_id = $1' : ''}\n    ${noQueries ? 'AND a.completed = 0' : ''}\n  `\n  const doorbellsAssignmentsQuery = `\n    SELECT *\n    from doorbells_assignments da\n    INNER JOIN doorbells d\n    ON d.special_id = da.doorbell_special_id\n    WHERE d.deleted = 0\n    ${id ? 'AND da.assignment_id = $1' : ''}\n  `\n  const buildingsQuery = `\n    SELECT *\n    from buildings\n  `\n  const [assignments, doorbellsAssignments, buildings] = await Promise.all([\n    query(assignmentsQuery, [id, campaign_id, user_id]),\n    query(doorbellsAssignmentsQuery, [id]),\n    query(buildingsQuery),\n  ])\n\n  await Promise.all(\n    assignments.rows.map(async assignment => {\n      const assignmentId = assignment.id\n      const aBuildingsIds = []\n      const aBuildings = []\n      const aDoorbells = []\n      const aTerritories = []\n\n      doorbellsAssignments.rows.forEach(doorbellAssignment => {\n        if (doorbellAssignment.assignment_id === assignmentId) {\n          aDoorbells.push({ ...doorbellAssignment, completed: doorbellAssignment.completed })\n          aBuildingsIds.push(doorbellAssignment.building_id)\n        }\n      })\n      ;[...new Set(aBuildingsIds)].forEach(id => {\n        const building = buildings.rows.find(b => b.id === id)\n        if (building) {\n          aBuildings.push(building)\n          aTerritories.push(building.territory)\n        }\n      })\n\n      assignment.doorbells = aDoorbells\n      assignment.buildings = aBuildings\n      assignment.territories = [...new Set(aTerritories)]\n\n      if (user_id) {\n        const usersWithSameBuildingsAssignedQuery = `\n          SELECT distinct(da.assignment_id), u.name, u.lastname, ua.user_id\n          FROM doorbells_assignments da\n          INNER JOIN assignments a\n          ON a.id = da.assignment_id\n          INNER JOIN user_assignments ua\n          ON a.id = ua.assignment_id\n          INNER JOIN users u\n          ON u.id = ua.user_id\n          WHERE da.building_id in (${assignment.buildings.map((_, i) => `$${i + 2}`).join(', ')})\n          AND a.completed = 0\n          AND (a.expiry_date is null or a.expiry_date > now())\n          AND ua.user_id != $1\n        `\n        const { rows } = await query(\n          usersWithSameBuildingsAssignedQuery,\n          [user_id, assignment.buildings.map(b => b.id)].flat(),\n        )\n        const users = []\n        if (rows.length) {\n          rows.forEach(row => {\n            const fullname = `${row.name} ${row.lastname}`\n            if (!users.some(u => u.id === row.user_id))\n              users.push({\n                fullname,\n                id: row.user_id,\n              })\n          })\n        }\n        assignment.usersSharingBuildings = users\n      }\n    }),\n  )\n\n  return assignments.rows\n}\n\nrouter.get('/', authenticated.user, async (req, res, next) => {\n  try {\n    validateUserId(req)\n    // this is only prepared to take one query value\n    const { campaign_id, user_id } = req.query\n    const assignments = await getAssignments({ campaign_id, user_id })\n    res.send(assignments)\n  } catch (err) {\n    next(err)\n  }\n})\n\nrouter.get('/:id', authenticated.user, async (req, res) => {\n  try {\n    const assignment = await getAssignments({ id: req.params.id })\n    res.send(assignment)\n  } catch (err) {\n    next(err)\n  }\n})\n\nrouter.post('/', authenticated.admin, async (req, res, next) => {\n  try {\n    validateAssignment(req.body)\n    const { user_id, note, doorbells, campaign_id, expiry_date } = req.body\n    const assignmentQuery = `\n      INSERT INTO assignments (admin_note, expiry_date, campaign_id)\n      VALUES ($1, $2, $3)\n      RETURNING id\n    `\n    const { rows } = await query(assignmentQuery, [note, expiry_date, campaign_id])\n    const assignment_id = rows[0].id\n    const userAssignmentsQuery = `\n      INSERT INTO user_assignments (user_id, assignment_id)\n      VALUES ($1, $2)\n    `\n    await query(userAssignmentsQuery, [user_id, assignment_id])\n    const doorbellsAssignmentsData = doorbells.reduce((acc, doorbell) => {\n      return acc.concat(assignment_id, doorbell.building_id, doorbell.special_id)\n    }, [])\n    const partialDoorbellsAssignmentsQuery = `\n      INSERT INTO doorbells_assignments (assignment_id, building_id, doorbell_special_id)\n      VALUES ?\n    `\n    const doorbellsAssignmentsQuery = createQueryValues(\n      partialDoorbellsAssignmentsQuery,\n      doorbellsAssignmentsData,\n      3,\n    )\n    await query(doorbellsAssignmentsQuery, doorbellsAssignmentsData)\n    res.send()\n  } catch (err) {\n    next(err)\n  }\n})\n\nrouter.put('/:id', authenticated.user, async (req, res, next) => {\n  try {\n    const { specialId, buildingId } = req.body\n    const assignmentId = req.params.id\n    // validate assignmet id belonging to user\n    const userId = req.user.id\n    const isAdmin = req.user.is_admin\n    const assignment = (await getAssignments({ id: assignmentId }))[0]\n    if (!assignment) throw new CustomError(404, 'Assignment not found')\n    if (!isAdmin && assignment.user_id !== userId) throw new CustomError(403, 'Sin trampas please')\n\n    // if assignment is complete, ignore petition\n    if (assignment.completed) throw new CustomError(400, \"Can't modify completed assignment\")\n\n    // toogle boorbell\n    const toggleDoorbellQuery = `\n      UPDATE doorbells_assignments\n      SET completed = 1 - completed\n      WHERE assignment_id = $1 AND doorbell_special_id = $2\n    `\n    await query(toggleDoorbellQuery, [assignmentId, specialId])\n\n    // update building last done\n    const updateBuildingLastDoneQuery = `\n      UPDATE buildings\n      SET last_done = NOW()\n      WHERE id = $1\n    `\n    await query(updateBuildingLastDoneQuery, [buildingId])\n\n    // TODO: revert building last done if user toggles off building\n\n    // check if this it was already registered in history\n    const checkIfInHistoryQuery = `\n      SELECT *\n      FROM history\n      WHERE doorbell_special_id = $1\n      AND assignment_id = $2\n    `\n    const result = await query(checkIfInHistoryQuery, [specialId, assignment.id])\n    const inHistory = result.rows.length === 1\n    // update history\n    if (inHistory) {\n      const updateHistoryQuery = `\n        DELETE FROM history\n        WHERE id = $1\n      `\n      await query(updateHistoryQuery, [result.rows[0].id])\n    } else {\n      const updateHistoryQuery = `\n        INSERT INTO history (doorbell_special_id, assignment_id)\n        VALUES ($1, $2)\n      `\n      await query(updateHistoryQuery, [specialId, assignment.id])\n    }\n\n    // if toggled doorbell was last one, finish assignment\n    const pendingCompletion = []\n    assignment.doorbells.forEach(d => {\n      if (!d.completed) pendingCompletion.push(d.special_id)\n    })\n    const isCompleted = pendingCompletion.length === 1 && pendingCompletion.includes(specialId)\n    if (isCompleted) {\n      const setAssignmentCompletedQuery = `\n        UPDATE assignments\n        SET completed = 1\n        WHERE id = $1\n      `\n      await query(setAssignmentCompletedQuery, [assignmentId])\n    }\n\n    res.send()\n  } catch (err) {\n    next(err)\n  }\n})\n\nrouter.delete('/:id', authenticated.admin, async (req, res, next) => {\n  const { id } = req.params\n  try {\n    await query(\n      `\n      DELETE FROM assignments where id = $1\n      `,\n      [id],\n    )\n    res.send()\n  } catch (err) {\n    next(err)\n  }\n})\n\nmodule.exports = router\n"],"file":"assignments.js"}