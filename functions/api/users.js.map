{"version":3,"sources":["../../backend/api/users.js"],"names":["Joi","require","express","router","Router","query","CustomError","AuthUtils","authenticated","validateUser","user","schema","username","string","min","required","password","name","lastname","validate","error","get","admin","req","res","queryString","result","send","rows","post","next","body","length","hashPassword","saltedPassword","delete","id","params","deleteQuery","module","exports"],"mappings":"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","sourcesContent":["const Joi = require('joi')\nconst express = require('express'),\n  router = express.Router()\nconst query = require('../db')\nconst CustomError = require('../errors')\nconst AuthUtils = require('../utils/authentication')\nconst authenticated = require('../middlewares/authenticated')\n\nfunction validateUser(user) {\n  const schema = {\n    username: Joi.string()\n      .min(3)\n      .required(),\n    password: Joi.string()\n      .min(6)\n      .required(),\n    name: Joi.string().required(),\n    lastname: Joi.string().required(),\n  }\n  const { error } = Joi.validate(user, schema)\n  if (error) {\n    throw new CustomError(400, error)\n  }\n}\n\nrouter.get('/', authenticated.admin, async (req, res) => {\n  const queryString = `\n    SELECT id, username, name, lastname, CONCAT (name, ' ', lastname) as fullname\n    from users\n    where is_admin = 0\n  `\n  const result = await query(queryString)\n  res.send(result.rows)\n})\n\nrouter.post('/', authenticated.admin, async (req, res, next) => {\n  try {\n    validateUser(req.body)\n    const { username, password, name, lastname } = req.body\n    const queryString = `\n      SELECT * from users where username = $1\n    `\n    const result = await query(queryString, [username])\n    if (result.rows.length) {\n      return next(new CustomError(400, 'Ya existe un usuario con ese nombre'))\n    }\n    const saltedPassword = await AuthUtils.hashPassword(password)\n    await query(\n      `\n      INSERT INTO users (username, password, name, lastname) VALUES ($1, $2, $3, $4)\n      `,\n      [username, saltedPassword, name, lastname],\n    )\n    res.send()\n  } catch (err) {\n    next(err)\n  }\n})\n\nrouter.delete('/:id', authenticated.admin, async (req, res, next) => {\n  try {\n    const { id } = req.params\n    const deleteQuery = `\n      DELETE FROM users WHERE id = $1\n    `\n    await query(deleteQuery, [id])\n    res.send()\n  } catch (err) {\n    next(err)\n  }\n})\n\nmodule.exports = router\n"],"file":"users.js"}