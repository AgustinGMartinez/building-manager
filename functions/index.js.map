{"version":3,"sources":["../backend/index.js"],"names":["functions","require","admin","initializeApp","config","firebase","express","cors","app","api","bodyParser","CustomError","use","json","err","req","res","next","message","isJoi","status","send","error","details","exports","https","onRequest","http","url","proxy","client_req","client_res","console","log","slice","parsedUrl","parse","hostname","pathname","options","path","method","headers","request","writeHead","statusCode","pipe","end"],"mappings":"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","sourcesContent":["const functions = require('firebase-functions')\nconst admin = require('firebase-admin')\nadmin.initializeApp(functions.config().firebase)\n\nconst express = require('express')\nconst cors = require('cors')\nconst app = express()\nconst api = require('./api')\nconst bodyParser = require('body-parser')\nconst CustomError = require('./errors')\n/* const graphqlHTTP = require('express-graphql') */\n\napp.use(cors())\n\napp.use(bodyParser.json())\n\napp.use(api)\n\napp.use((err, req, res, next) => {\n  if (err instanceof CustomError) {\n    if (!err.message.isJoi) {\n      return res.status(err.status).send({\n        error: err.message,\n      })\n    }\n    return res.status(err.status).send({\n      error: err.message.details[0].message,\n    })\n  }\n  return res.status(500).send({\n    error: err.message,\n  })\n})\n\nexports.api = functions.https.onRequest(app)\n\n// proxy implementation\n\nvar http = require('http')\nvar url = require('url')\n\nexports.proxy = functions.https.onRequest(function onRequest(client_req, client_res) {\n  console.log('gonna fetch:', client_req.url.slice(1))\n\n  const parsedUrl = url.parse('http://' + client_req.url.slice(1))\n  console.log('hostname:', parsedUrl.hostname)\n  console.log('path:', parsedUrl.pathname)\n\n  var options = {\n    hostname: parsedUrl.hostname,\n    path: parsedUrl.pathname,\n    method: client_req.method,\n    headers: client_req.headers,\n  }\n\n  var proxy = http.request(options, function(res) {\n    client_res.writeHead(res.statusCode, res.headers)\n    res.pipe(client_res, {\n      end: true,\n    })\n  })\n\n  client_req.pipe(proxy, {\n    end: true,\n  })\n})\n"],"file":"index.js"}